:title: دوره آموزش Git
:author: عباس یزدان پناه
:description: این ارائه برای فرادرس آماده شده است
:keywords: presentation, faradars, git
:css: git.css

----

:data-x: r2000



.. raw:: html

	<h2>باسمه تعالی</h2>


دوره آموزش دوپینگی Git 
=========================================================

عباس یزدان‌پناه 
------------------------------





----




فهرست
===========================================

- درباره من!
- سابقه درس گیت!
- نصب و راه‌اندازی
- مفاهیم گیت
- ساختن یک منبع کد محلی
- اضافه کردن و کامیت!
- تغییر و کامیت!
- تاریخچه تغییرات
- شاخه‌ها


----

:data-x: r0
:data-y: r1080


فهرست ادامه
===========================================

- سرور git
- گرفتن از سرور
- فرستادن تغییرات
- بروزرسانی و ادغام
- برچسب‌ها
- برگردادن تغییرات
- واسط کاربری


----

:data-x: r2000
:data-y: 0

درباره من!
===========================================

- یه یادگیر همیشگی
- دوست داشته معلم بشه اما نشده
- دوست داشته به دیگران کمک کنه
- دوست داشته تجربه کنه


----

:data-x: r2000
:data-y: 0

سابقه این درس!
===========================================

- قرار بود برای فرادرس باشه
- قسمت اول توی آپارات هست
- این درس خیلی فشرده اون درسه!
- حتما قسمت اول رو ببینید


----

:data-x: r2000
:data-y: 0

نصب و راه‌اندازی Git
===========================================

- در ویندوز و mac به سایت git-scm.com بروید و دانلود و نصب کنید
- در لینوکس از package manager لینوکس استفاده کرده و پکیج git را نصب کنید
- کل این در ترمینال اتفاق می‌افتد
    * در ویندوز از git bash استفاده کنید
    * در لینوکس و mac از ترمینال مورد علاقه خود استفاده کنید


----

:data-x: r2000
:data-y: 0

مفاهیم گیت!
===========================================

- کلا یک ساختار درختی از تغییرات است!
- فقط تغییرات فایلها را نسبت به نسخه قبل نگه می‌دارد.
- به هر نقطه در تاریخچه تغییرات یک کامیت گفته می‌شود.

----

:data-x: r0
:data-y: r1080


مفاهیم گیت! سه درخت
===========================================


- منبع محلی از سه بخش تشکیل شده است
- اول بخش Working Directory یا شاخه کار است که فایلها در آن قرار دارد
- بخش دیگر به اسم Index که فایلهایی که قرار است کامیت شوند در آن قرار دارد
- بخش آخر به اسم HEAD که به آخرین کامیت در تاریخچه اشاره می‌کند.

.. image:: images/trees.png
	:height: 200px


----

:data-x: r2000
:data-y: 0

ساختن یک منبع کد محلی
===========================================

- این کار با دستور زیر انجام می‌شود ::


    git init repoName


----

:data-x: r0
:data-y: r1080
:class: justheader


ساختن یک منبع کد محلی در عمل
===========================================

----

:data-x: r2000
:data-y: 0


اضافه کردن و کامیت!
===========================================

- ابتدا فایل جدید را بسازید
- فایل را کامیت کنید. 
- هر کامیت یک پیغام دارد
- با دستورات زیر فایلها اضافه و کامیت می‌شوند ::


    git add fileName
    git commit -m "fileName added"


----

:data-x: r0
:data-y: r1080
:class: justheader


اضافه کردن و کامیت! در عمل
===========================================

----

:data-x: r2000
:data-y: 0

دیدن تاریخچه!
===========================================


- با دستور زیر لیست آخرین تغییرات آورده می‌شود ::

    git log

- اگر تغییرات یک فرد خاص را خواستید ببینید ::

    git log --author=bob

----

:data-x: r0
:data-y: r1080

دیدن تاریخچه!
===========================================

- اگر خواستید تغییرات را در یک خط ببینید ::

    git log --pretty=oneline

- کلی حالت دیگر هم هست که از راهنما مشورت بگیرید ::

    git log --help


----

:data-x: r0
:data-y: r1080
:class: justheader


دیدن تاریخچه! در عمل
===========================================


----

:data-x: r2000
:data-y: 0
:data-scale: 1

سرور گیت
===========================================

- گیت یک سیستم کنترل نسخه توضیح شده است
- سرور یک منبع گیت قراردادی است
- سرورهای گیت زیادی وجود دارند
- مثالها روی github زده می‌شوند







----

:data-x: r0
:data-y: r1080

گرفتن منبع از یک سرور!
===========================================

- ابتدا بایستی آدرس سرور را داشته باشید
- با یکی از دستورات زیر می‌توانید منبع را بگیرید ::

    git clone /path/to/repository
    git clone username@host:/path/to/repository

- مثلا ::

    git clone https://github.com/yazdan/presentations

----

:data-x: r0
:data-y: r1080
:class: justheader


گرفتن منبع از یک سرور! در عمل
===========================================

----

:data-x: r2000
:data-y: 0

فرستادن تغییرات
===========================================

- بایستی تغییر خود را به روند توضیح داده شده کامیت کنید
- از دستور زیر برای فرستادن کامیت استفاده کنید ::

    git push origin master

- اضافه کردن یک سرور ::

    git remote add origin <server>

----

:data-x: r0
:data-y: r1080
:class: justheader

فرستادن تغییرات در عمل
===========================================

----

:data-x: r2000
:data-y: 0

شاخه‌ها!
===========================================

- شاخه‌ها به ما کمک می‌کنند که کارها رو بصورت موازی پیش ببریم
- شاخه‌ها اشاره گرهایی به یک کامیت از تاریخچه هستند به همین خاطر کم هزینه‌اند

.. image:: images/branches.png
	:height: 200px

- ساختن یک شاخه جدید ::

    git checkout -b feature_x

----

:data-x: r0
:data-y: r1080

شاخه‌ها!
===========================================

- برگشتن به شاخه اصلی ::

    git checkout master

- حذف یک شاخه ::

    git branch -d feature_x

- فرستادن یک شاخه ::

    git push origin <branch>

----

:data-x: r0
:data-y: r1080
:class: justheader


شاخه‌ها! در عمل
===========================================

----

:data-x: r2000
:data-y: 0

بروزرسانی و ادغام
===========================================

- می‌توان آخرین تغییرات سرور را با دستور زیر گرفت ::

    git pull

- اگر بخواهیم تغییرات یک شاخه دیگر را با شاخه فعلی ادغام کنیم ::

    git merge <branch>

- ممکن است دو نفر یک بخش را تغییر داده باشند که به تعارض می‌خورند و بایستی دستی تعارض حل شود.

----

:data-x: r0
:data-y: r1080
:class: justheader

بروزرسانی و ادغام در عمل
===========================================

----

:data-x: r2000
:data-y: 0

برچسب‌ها
===========================================

- ما نیاز داریم که هر از گاهی به بخش از حافظه برچسب بزنیم.
- از دستور زیر برای درست کردن برچسب استفاده می کنیم ::

    git tag 1.0.0 1b2e1d63ff

- دیدن تگ‌ها ::

    git tag

----

:data-x: r0
:data-y: r1080
:class: justheader

برچسب‌ها در عمل
===========================================

----

:data-x: r2000
:data-y: 0

برگرداندن تغییرات
===========================================

- گاهی می‌خواهیم یک تغییر را برگردانیم
- برای برگداندن تغییرات یک فایل ::

    git checkout -- <filename>

- تغییرات اضافه شده به INDEX نگه داشته می‌شود.
- گرفتن آخرین تغییرات سرور و حذف کل تغییرات ::

    git fetch origin
    git reset --hard origin/master




----

:data-x: r0
:data-y: r1080
:class: justheader

برگرداندن تغییرات در عمل
===========================================


----


:data-y: 0
:data-x: r2000
:data-rotate-x: r90
:class: justheader

abzy.ir
================================

.. raw:: html
	
	<div>
	<a href="http://twitter.com/yazdanpanaha" class="icon-twitter icon-2x"></a>yazdanpanaha
	<a href="http://github.com/yazdan" class="icon-octocat icon-2x"></a>yazdan
	</div>



