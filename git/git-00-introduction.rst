:title: دوره آموزش Git
:author: عباس یزدان پناه
:description: این ارائه برای فرادرس آماده شده است
:keywords: presentation, faradars, git
:css: git.css

----

:data-x: r2000



.. raw:: html

	<h2>باسمه تعالی</h2>


دوره آموزش Git - مقدمه
=========================================================

عباس یزدان‌پناه 
------------------------------

.. image:: images/FaraDars-Header-A.png



----




فهرست
===========================================

- سیستم کنترل نسخه؟
- تاریخچه سیستم کنترل نسخه
- انواع و نسلهای مختلف سیستم کنترل نسخه



----

آیا برای شما هم اتفاق افتاده است؟
====================================

- چند روز مانده به تحویل پروژه
- تغییرات اخیر منجر به از کار افتادن بخش اساسی پروژه
- نیاز به زمان برای تشخیص تغییر
- فرصت کافی برای عیب‌یابی وجود ندارد
- آخرین نسخه پروژه وجود ندارد



----

چرا سیستم کنترل نسخه؟
========================

- نگهداری از نسخه‌ها
- امکان دیدن آسان تغییرات
- امکان بازگرداندن فایل‌های به حالت اولیه
- امکان بررسی و دیدن آسان نسخه‌های مختلف



----

تاریخچه سیستم کنترل نسخه
===========================

- قبل از عصر نرم‌افزار
	- کپی صفحات قبل از تغییر
	- نسخه پیش‌نویس، نسخه اصلی، ویرایش دوم و ...
	- ذخیره در بایگانی‌ها و کتابخانه‌ها


----

:data-x: r0
:data-y: r1080

تاریخچه سیستم کنترل نسخه - ادامه
==================================


+-------------------------------------------------------------------------------------+
| عصر نرم‌افزار                                                                       |
+----------------------------------------------------+--------------------------------+
| اکنون                                              | ابتدا                          |
+====================================================+================================+
| - حل مشکلات ذخیره سازی                             | - گرفتن کپی از هر فایل         |
|                                                    |                                |
| - بهبود روند ذخیره تغییرات                         | - مشکل فضای ذخیره‌سازی         |
|                                                    |                                |
| - تمرکز روی درست کردن شاخه‌ها و بهبود روند تعامل   | - نگهداری بیت‌های تغییریافته   |
+----------------------------------------------------+--------------------------------+


----


:data-x: r2000
:data-y: 0

انواع سیستم‌های کنترل نسخه
===========================


+-------+--------------+------------------+-----------------------+-------------------------------------------------------+
| نسل   | شبکه         | عملیات           | همزمانی               | مثال                                                  |
+=======+==============+==================+=======================+=======================================================+
| اول   | نداشتند      | یک فایل          | قفل کردن              | RCS, SCCS                                             |
+-------+--------------+------------------+-----------------------+-------------------------------------------------------+
| دوم   | متمرکز       | چند فایل         | ادغام قبل از کامیت    | CVS, SourceSafe, Subversion, Team Foundation Server   |
+-------+--------------+------------------+-----------------------+-------------------------------------------------------+
| سوم   | غیر متمرکز   | مجموعه تغییرات   | کامیت قبل از ادغام    | Bazaar, Git, Mercurial                                |
+-------+--------------+------------------+-----------------------+-------------------------------------------------------+


----

:data-x: r2000
:data-y: 0


نسل اول
==================================

- Source Code Control System - SCCS
- Revision Control System - RCS

----

:data-x: r0
:data-y: r1080


Source Code Control System - SCCS
==================================

- توسعه یافته از Bell Labs
- در سال 1972
- کپی فایل در هر تغییر
- تشخیص محل و نحوه تغییر مشکل است
- پیدا کردن دقیق نسخه سخت است

----



Revision Control System - RCS
==================================

- توسعه یافته در دانشگاه پردو
- توسعه یافته برای یونیکس
- کاربری آسان
- کار روی یک فایل
- تنها یک کاربر روی یک فایل



----

:data-x: r2000
:data-y: 0


نسل دوم
==================================

- Concurrent Versions System - CVS
- Subversion
- Visual Source Safe
- Team Foundation Server


----

:data-x: r0
:data-y: r1080


Concurrent Versions System - CVS
==================================

- توسعه اولیه به عنوان واسط کاربری  RCS
- متن باز
- کلاینت سرور
- هر کامیت یک مشخصه عددی دارد
- قبل از کامیت تداخل تشخیص داده می‌شود
- سرور حاوی آخرین نسخه
- پشتیبانی ساده از شاخه‌ها و ادغام
- عدم پیگیری نام فایلها و فولدرها


----


Subversion
===========================

- معروف به ورژن بهتر شده CVS
- کلاینت و سرور
- سادگی زیاد
- استفاده شده توسط پروژه‌های متن‌باز
- مورد استفاده میلیون‌ها توسعه دهنده
- کمک به توسعه روش‌های continues integration
- پشتیبانی ضعیف از شاخه‌ها و ادغام


----


Visual Source Safe
===========================

- بسیار محبوب میان توسعه دهندگان تحت ویندوز
- کلاینت سرور
- دیگر توسعه نمی‌یابد
- در ابتدا برای همه سیستم عامل‌های موجود
- پس از خریده شدن توسط مایکروسافت پشتیبانی تنها از ویندوز


----


Team Foundation Server
===========================

- بیشتر از یک سیستم کنترل نسخه
- یک سیستم مدیریت پروژه و کنترل نسخه
- یک سیستم متمرکز



----

:data-x: r2000
:data-y: 0


نسل سوم
==================================

- Git
- Mercurial
- Bazaar


----

:data-x: r0
:data-y: r1080


Git
===========================

- سیستم کنترل نسخه توزیع شده
- توسعه یافته توسط لینوس توروالدز خالق لینوکس
- پشتیبانی از کلاینت و سرور
- پشتیبانی از پروتکل‌های زیاد
- قوی در تشخیص تغییرات ناخواسته.
- استفاده از ‌SHA-1 برای تشخیص تغییرات
- براساس گراف جهت‌دار بدون دور
- پشتیباین کامل از شاخه‌ها و ادغام
- توسعه در زبان C


----


Mercurial
===========================

- سیستم کنترل نسخه توزیع شده
- توسعه تقریبا همزمان با Git
- استفاده از ‌SHA-1 برای تشخیص تغییرات
- پشتیبانی از کلاینت و سرور
- پشتیبانی از ادغام سه حالته
- توسعه به زبان پایتون و C

----


Bazaar
===========================

- سیستم کنترل نسخه توزیع شده
- توسعه در canonical شرکت توسعه دهنده ubuntu
- توسعه تقریبا همزمان با Git
- پشتیبانی از کلاینت و سرور
- توسعه به زبان پایتون

----

:data-x: r2000
:data-y: 0

جمع بندی
========================

- چرایی استفاده از سیستم کنترل نسخه
- نسل‌های مختلف سیستم کنترل نسخه
	- متمرکز یا غیر متمرکز
	- کلاینت سرور
	- ساده یا پیچیده



----



:data-rotate-x: r90


abzy.ir
================================

.. image:: images/FaraDars-Header-A.png

.. raw:: html
	
	<div>
	<a href="http://twitter.com/yazdanpanaha" class="icon-twitter icon-2x"></a>yazdanpanaha
	<a href="http://github.com/yazdan" class="icon-octocat icon-2x"></a>yazdan
	</div>



